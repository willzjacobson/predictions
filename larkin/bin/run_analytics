#!/usr/bin/env python
# coding=utf-8

import argparse

import pandas as pd

from larkin.predictions.run import main
from larkin.user_config import user_config

all_buildings = user_config["default"]["buildings"]
is_debug = user_config["default"]["debug"]
usage = "Disclaimer: Accuracy for these predictions" \
        " will dip 2+ hours ahead" \
        " of the passed in date. As an example," \
        " if we would like to predict" \
        " ahead of 2016-03-10 10:00:00Z, then the" \
        " accuracy score of the ensemble model" \
        " is accurate up to the predictions for all times" \
        " between 2016-03-10 10:00:00Z" \
        " and 2016-03-10 12:00:00Z. In short," \
        " this suite is reliable for looking up to two hours into the future," \
        " with reliability degrading for 2+ hours."
parser = argparse.ArgumentParser(
        description="The Larkin forecasting user entry point.",
        epilog=usage)
parser.add_argument("--date", type=str, default=pd.Timestamp.utcnow(),
                    help="The UTC datetime that is the "
                         " upper bound for the training set. Defaults"
                         " to time of execution."
                         " For example, "
                         " --date '2016-03-05 10:00:00+00:00'.")
parser.add_argument("--debug", action='store_true', default=is_debug,
                    help="In debug mode, pushes to the database and writes"
                         " to json are deactivated.")
parser.add_argument("--buildings", type=str, nargs='*', default=all_buildings,
                    help="Comma or space delimited list of buildings to run."
                         " For example, --buildings '80_Pine','345_Park'.")

parser.add_argument("--kinds", type=str, nargs='*', default=["startup"],
                    help="Comma or space delimited types of predictions to run. "
                         " You can choose more than"
                         " one. The choices are 'startup',"
                         "'water', 'electric', and 'occupancy'."
                         " For example,"
                         " --kinds 'startup','occupancy'.")

args = parser.parse_args()

main(pd.to_datetime(args.date, utc=True),
     args.debug, args.buildings, args.kinds)
